# -*- coding: utf-8 -*-if not 'MUC_USER' in globals().keys():    MUC_USER = {}MUC_FILT = {}MUC_FCON = {'member':{},'t1':0}MFILT = 'dynamic/mucfilt.txt'MFILT_WHITE = 'dynamic/mucfilt_members.txt'MUC_CONFIG_FILE = 'dynamic/mucconfig.txt'db_file(MFILT, dict)db_file(MFILT_WHITE, dict)db_file(MUC_CONFIG_FILE, dict)MUC_CONFIG = eval(read_file(MUC_CONFIG_FILE))for x in {'pvlock':{}, 'newbie':{}, 'fool':{}, 'onlymemb':{}}.keys():    if not x in MUC_CONFIG:        MUC_CONFIG[x]={}MCFILT_FOOL = [base64.b64decode('0L/Rg9C6')]MCF_NS = 'http://jabber.ru/muc-filter'NCOLL = 0NCOLL_FILE = 'dynamic/user.txt'db_file(NCOLL_FILE, dict)try:    MUC_USER = eval(read_file(NCOLL_FILE))except: passdef test_nick_collect(g, n, r, a, cljid):    global NCOLL    global MUC_USER    if n == get_bot_nick(g):        return    if time.time() - INFO['start']<60:        return    jid = get_true_jid(g+'/'+n)    w = False    if not g in MUC_USER.keys():        MUC_USER[g]={}    if not n in MUC_USER[g].keys():        MUC_USER[g][n]={'jid':jid, 'joined':time.time(), 'last':time.time(), 'all':0}        w = True    else:        if MUC_USER[g][n]['jid'] != jid:            MUC_USER[g][n]={'jid':jid, 'joined':time.time(), 'last':time.time(), 'all':0}        else:            MUC_USER[g][n]['last'] = time.time()        w = True    if time.time() - NCOLL>10 and w:        write_file(NCOLL_FILE, str(MUC_USER))        NCOLL = time.time()    register_join_handler(test_nick_collect)def iq_muc(xs, cljid):    if xs['type']!='set': return    for query in xs.elements(): xmlns = query.uri    if xmlns != MCF_NS: return    #global z    xmlns, type, body, traf, jid, m = None, None, None, 0, None, None    try: traf = sys.getsizeof(xs.toXml())    except: pass    #print 'IN+'    #print xs.toXml()        iq = IQ(CLIENTS[cljid], 'result')    iq['to'] = xs['from']    iq['id'] = xs['id']    query = iq.addElement('query', MCF_NS)    if not xs.children or not xs.children[0].children: return    for x in xs.children[0].children:        m=x        #z=x    try: type = m['type']    except: pass    #PRIVATE LOCK CHECK        if m['to'] in MUC_CONFIG['pvlock']:        i=msg_403(m, 'This user does not take private message!')        query.addRawXml(i.toXml())        reactor.callFromThread(iq.send, xs['from'])        return        chat = xs['from']    ik = ''    if not MUC_FILT.has_key(chat):        MUC_FILT[chat] = {}    if not MUC_FILT[chat].has_key('traf'):        MUC_FILT[chat]['traf'] = traf    else: MUC_FILT[chat]['traf'] += traf    if type in ['chat','groupchat','normal']:        for x in m.elements():            if x.name == "body": body = x.__str__()                    jid = m['from']        #print m['from']                try:            #TESTING CODE FOR MAFIA GAME            if 'MAFIA' in globals().keys() and 'MAFIA_CHATS' in globals().keys():                if chat in MAFIA_CHATS and get_true_jid(jid) in MAFIA or get_true_jid(jid) in MAFIA_SES['idiot']:                    if not MAFIA[get_true_jid(jid)]['voice']:                        i=msg_403(m, 'You are die!')                        query.addRawXml(i.toXml())                        reactor.callFromThread(iq.send, xs['from'])                        return                                        if type==u'groupchat' and not body.split()[0].lower() in COMMANDS.keys():                        ik = [MAFIA[x]['nick'] for x in MAFIA.keys() if x==jid]                        if not ik:                            ik = [x for x in GROUPCHATS[chat].keys() if GROUPCHATS[chat][x]['jid']==jid]                        if ik:                            mafia_msg(m, 'public', [chat+'/'+ik[0], chat, ik[0], cljid], body)                            return                                        if MAFIA_SES['hod']>=1 and m['type']=='chat' and m['to']!=chat+'/'+get_bot_nick(chat):                        i=msg_403(m, 'Private message has been locked!')                        query.addRawXml(i.toXml())                        reactor.callFromThread(iq.send, xs['from'])                        return                    ####################################### end                                                                        if chat=='mafia_online@conference.jabber.ru' and 'MAFC' in globals().keys():                if MAFC_SYS['hod']>=1 and m['type']=='chat' and m['to']!='mafia_online@conference.jabber.ru/'+get_bot_nick(chat):                    i=msg_403(m, 'Private message has been locked!')                    query.addRawXml(i.toXml())                    reactor.callFromThread(iq.send, xs['from'])                    return                for x in GROUPCHATS[chat]:                    if GROUPCHATS[chat][x]['jid']==jid:                        if x in MAFC.keys() and MAFC[x]['voice']==0:                            i=msg_403(m, 'You are die!')                            query.addRawXml(i.toXml())                            reactor.callFromThread(iq.send, xs['from'])                            return                nnn=[x for x in GROUPCHATS[chat] if GROUPCHATS[chat][x]['jid']==jid]                if body.isdigit() and nnn:                    dd={'chat':'private','groupchat':'public'}                    tt=m['type']                    if tt in dd:                        tt=dd[tt]                    mfc_message(None, tt, [chat+'/'+nnn[0], chat, nnn[0], cljid], body)                    return        except: pass        #jid = unicode(jid)        if hasattr(jid, 'count'):            if jid.count('/'): jid = jid.split('/')[0]        if not jid in MUC_FILT[chat]: MUC_FILT[chat][jid]={'t':time.time(), 'm':body}        else:            if time.time() - MUC_FILT[chat][jid]['t']<1.8:                i=msg_403(m, 'Too fast you send! limit 1.8 sec.')                query.addRawXml(i.toXml())                reactor.callFromThread(iq.send, xs['from'])                return            if MUC_FILT[chat][jid]['m']==body and not body.split()[0].lower() in COMMANDS.keys():                i=msg_403(m, 'Your messages are very similar!')                query.addRawXml(i.toXml())                reactor.callFromThread(iq.send, xs['from'])                return            if body.isspace():                i=msg_403(m, 'Your messages contains only spaces!')                query.addRawXml(i.toXml())                reactor.callFromThread(iq.send, xs['from'])                return            MUC_FILT[chat][jid]['m']=body            MUC_FILT[chat][jid]['t']=time.time()        if chat in MUC_CONFIG['fool'] and jid in MUC_CONFIG['fool'][chat]:            i = xs_replace(m, random.choice(MCFILT_FOOL))            query.addRawXml(i.toXml())            reactor.callFromThread(iq.send, xs['from'])            return        if isinstance(body, basestring):            if len(body)>500:                i=msg_403(m, 'Very long Message!limit 500 symbols')                query.addRawXml(i.toXml())                reactor.callFromThread(dd, xs['from'],)                return    elif type in ['available', None]:        jid = get_true_jid(m['from'])        members = [MUC_USER[chat][x]['jid'] for x in MUC_USER[chat].keys()]                if not chat in MUC_FCON['member']: MUC_FCON['member'][chat]={}        try:            pz = m['to']            pz = pz.split('/')[1]            if [x for x in pz if unicodedata.category(x)=='Lo'] or len(pz)>21:                i = xs_403(m)                query.addRawXml(i.toXml())                reactor.callFromThread(iq.send, xs['from'])                return        except: pass        if chat in MUC_CONFIG['newbie'] and not jid in members:            if time.time()-MUC_CONFIG['newbie'][chat]['t']<1800 and MUC_CONFIG['newbie'][chat]['n']>5:                i = xs_403(m)                query.addRawXml(i.toXml())                reactor.callFromThread(iq.send, xs['from'])                return            MUC_CONFIG['newbie'][chat]['n']+=1            MUC_CONFIG['newbie'][chat]['t']=time.time()                if chat in MUC_CONFIG['onlymemb'] and not jid in members:            i = xs_403(m)            query.addRawXml(i.toXml())            reactor.callFromThread(iq.send, xs['from'])            return        if not jid in MUC_FCON['member'][chat] and time.time() - MUC_FCON['t1']>60:            MUC_FCON['member'][chat][jid]={}            write_file(MFILT_WHITE, str(MUC_FCON['member']))            MUC_FCON['t1']=time.time()    query.addRawXml(m.toXml())    #try: print iq.toXml()    #except: pass    reactor.callFromThread(iq.send, xs['from'])def xs_403(m):    i = domish.Element(('jabber:client', 'presence'))    i['type'] = 'error'    i['to']= m['from']    i['from']=m['to']    i['xml:lang'] = 'ru'    i.addElement('x', 'http://jabber.org/protocol/muc')    err = i.addElement('error')    err['code']= '403'    err['type']='auth'    err.addElement('forbidden','urn:ietf:params:xml:ns:xmpp-stanzas')    err.addElement('text','urn:ietf:params:xml:ns:xmpp-stanzas').addContent('Your presence is denied by muc-filt policy!')    return idef msg_403(m, text):    body = None    for x in m.elements():        if x.name == 'body':            try: body = x.__str__()            except: pass    ms = domish.Element(('jabber:client','message'))    ms['to'] = m['from']    ms['from'] = m['to']    ms['type'] = 'error'    ms.addElement("body", "jabber:client", body)    err = ms.addElement('error')    err['code']= '403'    err['type']='auth'    err.addElement('forbidden','urn:ietf:params:xml:ns:xmpp-stanzas')    err.addElement('text','urn:ietf:params:xml:ns:xmpp-stanzas').addContent(text)    return msdef xs_replace(m, text):    ms = domish.Element(('jabber:client','message'))    ms['to'] = m['to']    ms['from'] = m['from']    ms['type'] = m['type']    ms.addElement("body", "jabber:client", text)    return msdef mfilt_config(t, s, p):    if not s[1] in GROUPCHATS: return    if not p:                rep=u''        if not s[1] in MUC_CONFIG['newbie']:            rep+=u'\nРаботает лимит новичков!(mfilt newbie 1)'        else:            rep+=u'\nЛимит новичков отключен!'        if not s[1] in MUC_CONFIG['onlymemb']:            rep+=u'\nРаботает вход по белому списку!(mfilt white 1)'        else:            rep+=u'\nВход по белому списку отключен!'        try: rep+=u'\nТраффик конференции по muc-filter :'+str(MUC_FILT[s[1]]['traf']//1024)+u' Кб.'        except: pass        reply(t, s, rep)        return    if p.lower()==u'list':        if not s[1] in MUC_FILT.keys():            reply(t, s, u'Пусто')            return        reply(t, s, ', '.join(MUC_FILT[s[1]].keys()))        return    if p.lower()==u'pv':        if not s[2] or s[2].isspace():            return        us = s[1]+'/'+s[2]        if not 'pvlock' in MUC_CONFIG.keys():            MUC_CONFIG['pvlock'] = {}        if not us in MUC_CONFIG['pvlock']:            MUC_CONFIG['pvlock'][us]={}            reply(t, s, u'Теперь ваш приват закрыт от посетителей без членства!')        else:            del MUC_CONFIG['pvlock'][us]            reply(t, s, u'Открыл ваш приват!')        write_file(MUC_CONFIG_FILE, str(MUC_CONFIG))        return    if p.count(' '):        i=p.split()        if i[0] == 'fool':            if not s[1] in MUC_CONFIG['fool']:                MUC_CONFIG['fool'][s[1]] = {}            if not i[1] in MUC_CONFIG['fool'][s[1]] or i[1]==u'1':                MUC_CONFIG['fool'][s[1]][i[1]]={}                reply(t, s, u'ok!')            else:                del MUC_CONFIG['fool'][s[1]][i[1]]                reply(t, s, u'Удалил!')                            write_file(MUC_CONFIG_FILE, str(MUC_CONFIG))        if i[0] == 'white':            if not s[1] in MUC_CONFIG['onlymemb'] or i[1]==u'1':                MUC_CONFIG['onlymemb'][s[1]] = {}                reply(t, s, u'ok!')            else:                del MUC_CONFIG['onlymemb'][s[1]]                reply(t, s, u'Отключил вход по белому списку!')                            write_file(MUC_CONFIG_FILE, str(MUC_CONFIG))        if i[0] == 'newbie':            if not s[1] in MUC_CONFIG['newbie'] or i[1]==u'1':                MUC_CONFIG['newbie'][s[1]] = {'n':0,'t':0}                reply(t, s, u'ok!')            else:                del MUC_CONFIG['newbie'][s[1]]                reply(t, s, u'Отключил лимит новичков!')            write_file(MUC_CONFIG_FILE, str(MUC_CONFIG))    else:        reply(t, s, u'Неверный синтаксис!\nПример: mfilt white 1')register_command_handler(mfilt_config, 'mfilt', ['все'], 20, 'Юзает специальное расширение http://jabber.ru/muc-filter, позволяющее фильтровать все сообщения и презенсы конференции через бота, до попадания их в public. Используются ключи: \nlist - выводит список jid-ов прошедших через бота за время работы бота,\npv - закроет ваш приват для гостей, newbie - лимит новичков, не более 5-ти за пол часа,\n white - разрешает вход гостям только если они уже были в чате ранее,\n fool - добавление/удаление юзера в черный список, сообщения от него бот будет коверкать на свой лад. Команда без параметров выведет статистику.', 'mfilt', ['mfilt','mfilt white 1'])#register_stage0_init(load_mfilt_config)register_iq_handler(iq_muc)